Version 1.0.0
=============

Deployed: TBD

Contributors:
    - Nodar Okroshiashvili
    - Sana Ben Driss
    - Nicolas Galli
    - Tejash Shah
    - Tung Lee
    - Soledad Galli


**Renaming of Modules within Feature-engine**:

Feature-engine transformers have been sorted into submodules to smooth the development
of the package and shorten import syntax for users.

    - **Module imputation**: missing data imputers are now imported from ``feature_engine.imputation`` instead of ``feature_engine.missing_data_imputation``.
    - **Module encoding**: categorical variable encoders are now imported from ``feature_engine.encoding`` instead of ``feature_engine_categorical_encoders``.
    - **Module discretisation**: discretisation transformers are now imported from ``feature_engine.discretisation`` instead of ``feature_engine.discretisers``.
    - **Module transformation**: transformers are now imported from ``feature_engine.transformation`` instead of ``feature_engine.variable_transformers``.
    - **Module outliers**: transformers to remove or censor outliers are now imported from ``feature_engine.outliers`` instead of ``feature_engine.outlier_removers``.
    - **Module selection**: new module hosts transformers to select or remove variables from a dataset.
    - **Module creation**: new module hosts transformers that combine variables into new features using mathematical or other operations.

**Renaming of Classes**:

In this release, we have shortened the name of categorical encoders, and also renamed
other classes of Feature-engine to simplify import syntax.

    - **Encoders**: the word ``Categorical`` was removed from the classes name. Now, instead of ``MeanCategoricalEncoder``, the class is called ``MeanEncoder``. Instead of ``RareLabelCategoricalEncoder`` it is ``RareLabelEncoder`` and so on. Please check the encoders documentation for more details.
    - **Imputers**: the ``CategoricalVariableImputer`` is now called ``CategoricalImputer``.
    - **Discretisers**: the ``UserInputDiscretiser`` is now called ``ArbitraryDiscretiser``.
    - **Creation**: the ``MathematicalCombinator`` is not called ``MathematicalCombination``.
    - **WoEEncoder and PRatioEncoder**: the ``WoEEncoder`` now applies only encoding with the weight of evidence. To apply encoding by probability ratios, use a different transformer: the ``PRatioEncoder`` (**by Nicolas Galli**).

**Renaming of class init Parameters**:

We renamed a few parameters to unify the nomenclature across the Package.

    - **EndTailImputer**: the parameter ``distribution`` is now called ``imputation_method`` to unify convention among imputers. To impute using the IQR, we now need to pass ``imputation_method="iqr"`` instead of ``imputation_method="skewed"``.
    - **AddMissingIndicator**: the parameter ``missing_only`` now takes the boolean values ``True`` or ``False``.
    - **Winzoriser and OutlierTrimmer**: the parameter ``distribution`` is now called ``capping_method`` to unify names across Feature-engine transformers.

**New transformers and classes**:
    - **DropConstantFeatures**: DropConstantFeatures finds and removes constant and quasi-constant features from a dataframe (**by Tejash Shah**)
    - **DropDuplicateFeatures**: DropDuplicateFeatures finds and removes duplicated features from a dataset (**by Tejash Shah and Soledad Galli**)
    - **DropCorrelatedFeatures**: DropCorrelatedFeatures finds and removes features that are correlated (**by Nicolas Galli**)
    - **ShuffleFeaturesSelector**: ShuffleFeaturesSelector selects features by determining the drop in machine learning model performance when each feature's values are randomly shuffled from a dataframe (**by Sana Ben Driss**)
    - **SelectBySingleFeaturePerformance**: SelectBySingleFeaturePerformance trains a model based of each individual features, and derives performance (**by Nicolas Galli**)
    - **SelectByTargetMeanPerformance**: SelectByTargetMeanPerformance selects features encoding the categories with the target mean and using that as proxy for performance (**by Tung Lee and Soledad Galli**)
    - **RecursiveFeatureElimination**: RecursiveFeatureElimination selects features recursively, evaluating the drop in ML performance, from the least to the important feature (**by Sana Ben Driss**)

**Code Architecture - Important for Contributors and Developers**:
    - **Submodules**: transformers have been grouped within relevant submodules and modules.
    - **Individual tests**: testing classes have been subdivided into individual tests
    - **Code Style**: we adopted the use of flake8 for linting and PEP8 style checks, and black for automatic re-styling of code.
    - **Type hint**: rolled out the use of type hint throughout Feature-engine classes and functions (**by Nodar Okroshiashvili, Soledad Galli and Chris Samiullah**)

**Other Changes**:
    - **Updated documentation**: documentation reflects the current use of Feature-engine transformers
    - **Typo fixes**: Thank you to all who contributed to typo fixes (Tim Vink, Github user @piecot)